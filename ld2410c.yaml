esphome:
  name: ld2410c
  friendly_name: LD2410c

esp32:
  board: esp32dev
  framework:
    type: arduino

# Глобальные переменные для настроек
globals:
  - id: fan_address_var
    type: std::string
    initial_value: '"0xa4c138f19388b52c"'
  - id: switch_address_var
    type: std::string
    initial_value: '"Выключатель1/right"'

text_sensor:
  - platform: ld2410
    version:
      name: "firmware version"
    mac_address:
      name: "mac address"
  - platform: template
    name: "Статус автоуправления"
    id: auto_status
    lambda: |-
      if (id(auto_control).state) {
        return {"Включено"};
      } else {
        return {"Выключено"};
      }
    update_interval: 5s
  # Отображение текущих настроек (только для чтения)
  - platform: template
    name: "Адрес вентилятора"
    id: fan_address_display
    lambda: 'return id(fan_address_var);'
    update_interval: 10s
  - platform: template
    name: "Адрес выключателя"
    id: switch_address_display
    lambda: 'return id(switch_address_var);'
    update_interval: 10s

select:
  - platform: ld2410
    distance_resolution:
      name: "distance resolution"
    baud_rate:
      name: "baud rate"
    light_function:
      name: light function
    out_pin_level:
      name: out pin level

ld2410:
  id: ld2410_radar

# MQTT конфигурация со статическими параметрами
mqtt:
  broker: "192.168.0.118"
  port: 1883
  username: "user"
  password: "xxxxx"
  client_id: ld2410c_sensor
  discovery: true
  discovery_retain: false
  topic_prefix: esphome/ld2410c

# Enable logging с фильтрацией
logger:
  level: INFO
  logs:
    sensor: WARN  # Отключаем DEBUG сообщения от датчиков
    ld2410: INFO

# Enable Home Assistant API
api:
  encryption:
    key: "KahQLtumxnvNxlSAXedfZm9cLfSdQ/Kg3v2XtEbqBdQ="
  actions:
    - action: set_ld2410_bluetooth_password
      variables:
        password: string
      then:
        - bluetooth_password.set:
            id: ld2410_radar
            password: !lambda 'return password;'
    # Действия для изменения настроек
    - action: set_fan_address
      variables:
        address: string
      then:
        - globals.set:
            id: fan_address_var
            value: !lambda 'return address;'
        - logger.log:
            format: "Адрес вентилятора изменен на: %s"
            args: ['address.c_str()']
    - action: set_switch_address
      variables:
        address: string
      then:
        - globals.set:
            id: switch_address_var
            value: !lambda 'return address;'
        - logger.log:
            format: "Адрес выключателя изменен на: %s"
            args: ['address.c_str()']

ota:
  - platform: esphome
    password: "67d45d3690f652a1c33a0190f623bb83"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Ld2410C Fallback Hotspot"
    password: "Le5oOpFwWNjL"
  power_save_mode: none

uart:
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

# Переключатели (должны быть определены до использования в binary_sensor)
switch:
  - platform: ld2410
    engineering_mode:
      name: "engineering mode"
    bluetooth:
      name: "control bluetooth"
  # Переключатель автоматического управления освещением
  - platform: template
    name: "Автоуправление Освещение"
    id: auto_control
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:lightbulb-auto"
  # Переключатель автоматического управления вентилятором
  - platform: template
    name: "Автоуправление Вентилятор"
    id: auto_control_fan
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:fan-auto"

button:
  - platform: ld2410
    factory_reset:
      name: "сброс к заводским"
    restart:
      name: "перезагрузить"
    query_params:
      name: query params
  # Кнопка перезагрузки для применения настроек MQTT
  - platform: restart
    name: "Перезагрузка для MQTT"
    id: restart_for_mqtt
    icon: "mdi:restart"

number:
  - platform: ld2410
    timeout:
      name: Таймаут радара
    max_move_distance_gate:
      name: Макс. расстояние движения
    max_still_distance_gate:
      name: Макс. расстояние покоя
  # Настройка задержки выключения
  - platform: template
    name: "Задержка выключения"
    id: turn_off_delay
    optimistic: true
    min_value: 0
    max_value: 300
    initial_value: 30
    step: 5
    unit_of_measurement: "сек"
  # Настройка задержки включения вентилятора
  - platform: template
    name: "Задержка включения вентилятора"
    id: fan_turn_on_delay
    optimistic: true
    min_value: 30
    max_value: 600
    initial_value: 180
    step: 30
    unit_of_measurement: "сек"

binary_sensor:
  - platform: ld2410
    has_target:
      name: Обнаружение цели
      id: radar_has_target
      filters:
        - delayed_off: 2s  # Анти-дребезг
      on_press:
        then:
          # Управление освещением
          - if:
              condition:
                and:
                  - switch.is_on: auto_control
                  - lambda: 'return !id(switch_address_var).empty();'
              then:
                - script.stop: delayed_turn_off
                - mqtt.publish:
                    topic: !lambda 'return "zigbee2mqtt/" + id(switch_address_var) + "/set";'
                    payload: '{"state": "ON"}'
                - logger.log: 
                    format: "Включено освещение %s - обнаружено присутствие"
                    args: ['id(switch_address_var).c_str()']
          # Управление вентилятором
          - if:
              condition:
                and:
                  - switch.is_on: auto_control_fan
                  - lambda: 'return !id(fan_address_var).empty();'
              then:
                - script.stop: delayed_fan_turn_off
                - script.execute: delayed_fan_turn_on
                - logger.log: "Запущен таймер включения вентилятора"
      on_release:
        then:
          # Управление освещением
          - if:
              condition:
                and:
                  - switch.is_on: auto_control
                  - lambda: 'return !id(switch_address_var).empty();'
              then:
                - script.execute: delayed_turn_off
                - logger.log: "Запущен таймер выключения освещения"
          # Управление вентилятором
          - if:
              condition:
                and:
                  - switch.is_on: auto_control_fan
                  - lambda: 'return !id(fan_address_var).empty();'
              then:
                - script.stop: delayed_fan_turn_on
                - script.execute: delayed_fan_turn_off
                - logger.log: "Остановлен таймер включения вентилятора, запущен таймер выключения"
    has_moving_target:
      name: Движущаяся цель
    has_still_target:
      name: Неподвижная цель
    out_pin_presence_status:
      name: out pin presence status

sensor:
  - platform: ld2410
    light:
      name: light
    moving_distance:
      name: Расстояние движения
      id: moving_distance
    still_distance:
      name: Расстояние покоя
      id: still_distance
    moving_energy:
      name: Энергия движения
    still_energy:
      name: Энергия покоя
    detection_distance:
      name: Расстояние обнаружения
      id: radar_detection_distance

# Скрипты управления
script:
  # Скрипт с задержкой выключения освещения
  - id: delayed_turn_off
    then:
      - delay: !lambda "return id(turn_off_delay).state * 1000;"
      - if:
          condition:
            and:
              - binary_sensor.is_off: radar_has_target
              - switch.is_on: auto_control
              - lambda: 'return !id(switch_address_var).empty();'
          then:
            - mqtt.publish:
                topic: !lambda 'return "zigbee2mqtt/" + id(switch_address_var) + "/set";'
                payload: '{"state": "OFF"}'
            - logger.log: 
                format: "Выключено освещение %s - нет присутствия"
                args: ['id(switch_address_var).c_str()']
  
  # Скрипт с задержкой включения вентилятора
  - id: delayed_fan_turn_on
    then:
      - delay: !lambda "return id(fan_turn_on_delay).state * 1000;"
      - if:
          condition:
            and:
              - binary_sensor.is_on: radar_has_target
              - switch.is_on: auto_control_fan
              - lambda: 'return !id(fan_address_var).empty();'
          then:
            - mqtt.publish:
                topic: !lambda 'return "zigbee2mqtt/" + id(fan_address_var) + "/set";'
                payload: '{"state": "ON"}'
            - logger.log: 
                format: "Включен вентилятор %s - длительное присутствие"
                args: ['id(fan_address_var).c_str()']
  
  # Скрипт с задержкой выключения вентилятора
  - id: delayed_fan_turn_off
    then:
      - delay: !lambda "return id(turn_off_delay).state * 1000;"
      - if:
          condition:
            and:
              - binary_sensor.is_off: radar_has_target
              - switch.is_on: auto_control_fan
              - lambda: 'return !id(fan_address_var).empty();'
          then:
            - mqtt.publish:
                topic: !lambda 'return "zigbee2mqtt/" + id(fan_address_var) + "/set";'
                payload: '{"state": "OFF"}'
            - logger.log: 
                format: "Выключен вентилятор %s - нет присутствия"
                args: ['id(fan_address_var).c_str()']

captive_portal:
