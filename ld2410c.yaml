esphome:
  name: ld2410van
  friendly_name: LD2410van
  on_boot:
    priority: -100
    then:
      - text_sensor.template.publish:
          id: device_diagnostics
          state: !lambda 'return "Выключатель: " + id(switch_address_var);'
      - logger.log:
          format: "Диагностика при старте: Выключатель: %s"
          args: ['id(switch_address_var).c_str()']
      - lambda: |-
          bool success = id(mqtt_client).publish("esphome/ld2410van/status_test", "online");
          if (success) {
            id(mqtt_connected) = true;
            id(mqtt_status).publish_state("Подключен к MQTT");
            ESP_LOGI("main", "MQTT определён как подключён на старте.");
          } else {
            id(mqtt_connected) = false;
            id(mqtt_status).publish_state("Отключен от MQTT");
            ESP_LOGW("main", "MQTT определён как отключён на старте.");
          }

esp32:
  board: esp32dev
  framework:
    type: arduino

globals:
  - id: switch_address_var
    type: std::string
    initial_value: '"Выключатель1/center"'

  - id: mqtt_connected
    type: bool
    restore_value: no
    initial_value: 'false'

logger:
  level: DEBUG
  logs:
    sensor: WARN
    ld2410: INFO
    api: DEBUG
    text_sensor: DEBUG
    mqtt: DEBUG

select:
  - platform: ld2410
    distance_resolution:
      name: "distance resolution"
    baud_rate:
      name: "baud rate"
    light_function:
      name: light function
    out_pin_level:
      name: out pin level

# --- Wi-Fi Signal Diagnostic UI ---
text_sensor:
  - platform: template
    name: "LD2410van Wi-Fi Signal Status"
    id: wifi_signal_status
    lambda: !lambda 'return id(wifi_signal_strength).state ? "Signal strength: " + to_string(id(wifi_signal_strength).state) + " dB" : "Неизвестно";'
    update_interval: never

  - platform: ld2410
    version:
      name: "LD2410van Firmware Version"
    mac_address:
      name: "LD2410van MAC Address"

  - platform: template
    name: "LD2410van Статус автоуправления"
    id: auto_status
    lambda: |-
      if (id(auto_control).state) {
        return {"Включено"};
      } else {
        return {"Выключено"};
      }
    update_interval: never

  - platform: template
    name: "LD2410van Статус MQTT"
    id: mqtt_status
    lambda: |-
      if (id(mqtt_connected)) {
        return {"Подключен к MQTT"};
      } else {
        return {"Отключен от MQTT"};
      }
    update_interval: never

  - platform: template
    name: "LD2410van Диагностика устройства"
    id: device_diagnostics
    lambda: !lambda 'return "Выключатель: " + id(switch_address_var);'
    update_interval: never

button:
  - platform: template
    name: "LD2410van Query WiFi Signal"
    id: query_wifi_signal
    icon: "mdi:wifi"
    on_press:
      - text_sensor.template.publish:
          id: wifi_signal_status
          state: !lambda 'return id(wifi_signal_strength).state ? "Signal strength: " + to_string(id(wifi_signal_strength).state) + " dB" : "Неизвестно";'
      - logger.log:
          format: "Wi-Fi signal queried: %f dB"
          args: ['id(wifi_signal_strength).state']

  - platform: ld2410
    factory_reset:
      name: "LD2410van Сброс к заводским"
    restart:
      name: "LD2410van Перезагрузить"
    query_params:
      name: "LD2410van Query Parameters"

  - platform: restart
    name: "LD2410van Перезагрузка для MQTT"
    id: restart_for_mqtt
    icon: "mdi:restart"

ld2410:
  id: ld2410_radar

mqtt:
  id: mqtt_client
  broker: "192.168.0.118"
  port: 1883
  username: "user"
  password: "xxxxxx"
  client_id: ld2410van_sensor
  discovery: false
  discovery_retain: false
  topic_prefix: esphome/ld2410van
  on_connect:
    then:
      - globals.set:
          id: mqtt_connected
          value: 'true'
      - text_sensor.template.publish:
          id: mqtt_status
          state: "Подключен к MQTT"
      - logger.log: "MQTT подключен"
  on_disconnect:
    then:
      - globals.set:
          id: mqtt_connected
          value: 'false'
      - text_sensor.template.publish:
          id: mqtt_status
          state: "Отключен от MQTT"
      - logger.log: "MQTT отключен"

api:
  encryption:
    key: "k9d9LpAVktfcf340I14ZYdFV1fORzbCq4BtUY3BsP18="
  actions:
    - action: set_ld2410_bluetooth_password
      variables:
        password: string
      then:
        - bluetooth_password.set:
            id: ld2410_radar
            password: !lambda 'return password;'

ota:
  - platform: esphome
    password: "67d45d3690f652a1c33a0190f623bb83"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Ld2410C Fallback Hotspot"
    password: "Le5oOpFwWNjL"
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.0.125
    gateway: 192.168.0.5
    subnet: 255.255.255.0

uart:
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

switch:
  - platform: ld2410
    engineering_mode:
      name: "LD2410van Engineering Mode"
    bluetooth:
      name: "LD2410van Control Bluetooth"
  - platform: template
    name: "LD2410van Автоуправление Освещение"
    id: auto_control
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:lightbulb-auto"
    turn_on_action:
      - text_sensor.template.publish:
          id: auto_status
          state: "Включено"
      - logger.log: "Статус автоуправления изменен на: Включено"
    turn_off_action:
      - text_sensor.template.publish:
          id: auto_status
          state: "Выключено"
      - logger.log: "Статус автоуправления изменен на: Выключено"

number:
  - platform: ld2410
    timeout:
      name: "LD2410van Таймаут радара"
    max_move_distance_gate:
      name: "LD2410van Макс. расстояние движения"
    max_still_distance_gate:
      name: "LD2410van Макс. расстояние покоя"
  - platform: template
    name: "LD2410van Задержка выключения"
    id: turn_off_delay
    optimistic: true
    min_value: 0
    max_value: 300
    initial_value: 15
    step: 1
    unit_of_measurement: "сек"

binary_sensor:
  - platform: ld2410
    has_target:
      name: "LD2410van Обнаружение цели"
      id: radar_has_target
      filters:
        - delayed_off: 2s
      on_press:
        then:
          - if:
              condition:
                and:
                  - switch.is_on: auto_control
                  - lambda: 'return !id(switch_address_var).empty();'
                  - lambda: 'return id(mqtt_connected);'
              then:
                - script.stop: delayed_turn_off
                - mqtt.publish:
                    topic: !lambda 'return "zigbee2mqtt/" + id(switch_address_var) + "/set";'
                    payload: '{"state": "ON"}'
                - logger.log:
                    format: "Включено освещение %s - обнаружено присутствие"
                    args: ['id(switch_address_var).c_str()']
      on_release:
        then:
          - delay: 1s
          - if:
              condition:
                and:
                  - binary_sensor.is_off: radar_has_target
                  - switch.is_on: auto_control
                  - lambda: 'return !id(switch_address_var).empty();'
                  - lambda: 'return id(mqtt_connected);'
              then:
                - script.execute: delayed_turn_off
                - logger.log: "Запущен таймер выключения освещения"
    has_moving_target:
      name: "LD2410van Движущаяся цель"
    has_still_target:
      name: "LD2410van Неподвижная цель"
    out_pin_presence_status:
      name: "LD2410van Статус присутствия"

sensor:
  - platform: wifi_signal
    name: "LD2410van Signal Strength"
    id: wifi_signal_strength
    unit_of_measurement: "dB"
  - platform: ld2410
    light:
      name: "LD2410van Освещенность"
    moving_distance:
      name: "LD2410van Расстояние движения"
      id: moving_distance
    still_distance:
      name: "LD2410van Расстояние покоя"
      id: still_distance
    moving_energy:
      name: "LD2410van Энергия движения"
    still_energy:
      name: "LD2410van Энергия покоя"
    detection_distance:
      name: "LD2410van Расстояние обнаружения"
      id: radar_detection_distance

script:
  - id: delayed_turn_off
    then:
      - delay: !lambda 'return id(turn_off_delay).state * 1000;'
      - if:
          condition:
            and:
              - binary_sensor.is_off: radar_has_target
              - switch.is_on: auto_control
              - lambda: 'return !id(switch_address_var).empty();'
              - lambda: 'return id(mqtt_connected);'
          then:
            - mqtt.publish:
                topic: !lambda 'return "zigbee2mqtt/" + id(switch_address_var) + "/set";'
                payload: '{"state": "OFF"}'
            - logger.log:
                format: "Выключено освещение %s - нет присутствия"
                args: ['id(switch_address_var).c_str()']

captive_portal:
